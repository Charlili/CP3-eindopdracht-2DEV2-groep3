{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","js/src/script.js","js/src/classes/FlowchartApplication.js","js/src/classes/Line.js","js/src/classes/Shape.js","js/src/classes/Toolbar.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvfile":"script.dist.js","sourceRoot":"../","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(){\n\tconsole.log('Goed bezig Charlotte.');\n\n\t//\n\tfunction init() {\n\t\tconsole.log('test');\n\t\tif(getParameterByName('page') != null && (getParameterByName('page') === 'overview' || getParameterByName('page') === 'group')){\n\t\t\tconsole.log('Time to make apps');\n\t\t\tvar FlowchartApplication = require('./classes/FlowchartApplication.js');\n\t\t\tvar flowchartApplication = new FlowchartApplication($('.app'));\n\t\t}\n\t}\n\tinit();\n\n\t//function to get $_GET values\n\tfunction getParameterByName(name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n        results = regex.exec(location.search);\n    return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n\t}\n})();","module.exports = (function(){\n\n\tvar Toolbar = require('./Toolbar.js');\n\tvar Shape = require('./Shape.js');\n\tvar Line = require('./Line.js');\n\n\tvar shapes = [];\n\tvar lines = [];\n\tvar tempArray = [];\n\t\n\tfunction FlowchartApplication($el) {\n\t\tconsole.log('Making app....');\n\n\t\tthis.$el = $el;\n\t\tthis.tool = 'shape';\n\t\tthis.toolbar = new Toolbar($el);\n\n\t\tvar shape;\n\t\tthis.$el.click(this.clickHandler);\n\n\t}\n\tFlowchartApplication.prototype.clickHandler = function(e){\n\t\t//will replace this with bean event later\n\t\tif($('.button').attr('value') == 'Draw Shapes'){\n\t\t\tvar shape = new Shape(e); \n\t\t\tshapes.push(shape);\n\t\t}else{\n\t\t\t//create lines with canvas\n\t\t\tvar line = new Line(e); \n\t\t\tlines.push(line);\n\t\t}\n\t\t\n\t\t//make Shape or Line, depending on this.tool\n\t\t//while get x,y coordinates from release click\n\t};\n\t\n\tFlowchartApplication.prototype.save = function(){\n\t\t//check if user is logged in with $_SESSION['user']\n\n\t\t//if logged in: save shapes, lines, flowchart to database\n\n\t\t//if not logged in: register popup (when registered, automatic login.)\n\t};\n\tFlowchartApplication.prototype.changeTool = function(tool){\n\t\t//change tool\n\t\t//this.tool = tool;\n\t};\n\treturn FlowchartApplication;\n})();","module.exports = (function(){\n\n\tfunction Line(event) {\n\t\t\n\t\t//create 2 circles, this.c1 & this.c2\n\t\t//create line\n\n\t\t//add event listener for clicking on the c1, c2: moveHandler\t\n\t}\n\tLine.prototype.addText = function(){\n\t\t//add event listener for when input loses focus:\n\n\t\t//save input value\n\t\t//this.text = this.value;\n\t};\n\tLine.prototype.hoverHandler = function(e){\n\t\t//show move and scale tool\n\n\t\t//add click listener for move and scale thingy.\n\n\n\t};\n\tLine.prototype.moveHandler = function(e){\n\t\t//is currentTarget c1 or c2?\n\n\t\t//event handler for mouseMove\n\n\t\t//move to new position\n\t\t//if currentTarget c1:\t\n\t\t//this.x1 = offset.x;\n\t\t//this.y1 = offset.y;\t\n\t\t//else if currentTarget c2:\n\t\t//this.x2 = offset.x;\n\t\t//this.y2 = offset.y;\t\n\n\t\t//update line?\n\t};\n\t\n\treturn Line;\n})();","module.exports = (function(){\n\tvar size = [];\n\n\n\tfunction Shape(event) {\n\t\t\n\t\tthis.$el = $(document.createElement('div'));\n\t\tthis.x = event.offsetX;\n\t\tthis.y = event.offsetY;\n\t\tthis.$el.css('top',this.y);\n\t\tthis.$el.css('left',this.x);\n\t\tthis.$el.addClass('shape');\n\t\tthis.$el.addClass('draggable');\n\n\t\tthis.input = document.createElement('textarea');\n\t\tthis.input.type = 'text';\n\t\tthis.$el.css('value', this.text);\n\t\tthis.$el.append(this.input);\n\t\t//save input value\n\t\tthis.text = this.value;\n\t\t\n\t\t$('.app').append(this.$el);\n\t\t$('.shape').click(function(e) {\n\t\t\te.stopPropagation();\n\t\t});\n\t\t$('.draggable').draggable().resizable({ autoHide: false, handles: \"se\" });\n\t\t\n\t\t\n\n\t}\n\tShape.prototype.changeSize = function(event){\n\t\tthis.$el.css('width',event.offsetX);\n\t\tthis.$el.css('height',event.offsetY);\n\n\t};\n\tShape.prototype.remove = function(){\n\t\tthis.square.remove();\n\n\t};\n\tShape.prototype.addText = function(){\n\t\t//add event listener for when input loses focus:\n\t\t\n\t};\n\tShape.prototype.hoverHandler = function(e){\n\t\t//show move and scale tool\n\n\t\t//add click listener for move and scale thingy.\n\n\n\t};\n\tShape.prototype.moveHandler = function(e){\n\t\t//event handler for mouseMove\n\t\tconsole.log(this);\n\t\t//move to new position\t\n\t\tthis.x = offset.x;\n\t\tthis.y = offset.y;\t\n\n\t\t//update shape?\n\t};\n\tShape.prototype.scaleHandler = function(e){\n\t\t//event handler for mouseMove\n\t\t//scale to new position\n\t\tthis.width = offset.x;\n\t\tthis.height = offset.y;\t\n\n\t\t//update shape?\t\n\t};\n\t/* //example function\n\tShape.prototype.removeHandler = function(){\n\t\tconsole.log('trying to delete the mutherfucker');\n\t\tbean.fire(this, 'remove', this);\n\t}; */\n\t\n\treturn Shape;\n})();","module.exports = (function(){\n\n\tvar shapeTool = true;\n\tfunction Toolbar($el) {\n\t\t//make 2 buttons\n\t\tthis.$el = $('<input type=\"button\" class=\"button\" value=\"Draw Shapes\" />');\n\t\t\n\t\t$el.append(this.$el);\n\t\tthis.$el.click(this.changeTool);\n\t\t//addEventListener for button: changeTool\t\t\t\n\t}\n\tToolbar.prototype.changeTool = function(e){\n\t\te.stopPropagation();\n\t\tconsole.log('clicking tha button');\n\t\t// switch between makeShape or makeLine tool\n\t\tshapeTool = !shapeTool;\n\t\tif(shapeTool){\n\t\t\tthis.value = 'Draw Shapes';\n\t\t}else{\n\t\t\tthis.value = 'Draw Lines';\n\t\t}\n\t\t//use bean.fire to communicate this change to FlowchartApplication\n\n\t};\n\t\n\treturn Toolbar;\n})();"]}